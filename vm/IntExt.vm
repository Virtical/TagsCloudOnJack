function IntExt.LastNum 2
push argument 0
push constant 10
call Math.divide 2
push constant 10
call Math.multiply 2
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push argument 0
push local 0
eq
not
not
if-goto WHILE_END0
push argument 0
push constant 1
sub
pop argument 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function IntExt.Inc 0
push argument 0
push constant 1
add
return
function IntExt.Dec 0
push argument 0
push constant 1
sub
return
function IntExt.IsGreaterOrEqual 0
push argument 0
push argument 1
gt
push argument 0
push argument 1
eq
or
return
function IntExt.IsLessOrEqual 0
push argument 0
push argument 1
lt
push argument 0
push argument 1
eq
or
return
function IntExt.FromBigInt 5
push argument 0
call BigInt.GetDim 1
pop local 0
push argument 0
call BigInt.GetArray 1
pop local 4
push constant 0
pop local 1
push constant 1
pop local 2
push constant 0
pop local 3
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push local 1
push local 4
add
pop pointer 1
push that 0
push local 2
call Math.multiply 2
push local 3
add
pop local 3
push local 1
call IntExt.Inc 1
pop local 1
push local 2
push constant 10
call Math.multiply 2
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 3
return
function IntExt.Pow 1
push constant 1
pop local 0
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push argument 0
call Math.multiply 2
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function IntExt.Mod 0
label WHILE_EXP0
push argument 0
push argument 1
gt
not
if-goto WHILE_END0
push argument 0
push argument 1
sub
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
