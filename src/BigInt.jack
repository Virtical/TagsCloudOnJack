class BigInt {
    field Array A;
    field int Dim;
    field int MaxDim;

    constructor BigInt FromInt(int x) {
        var int i, digit, num;

        let A = Array.new(8);
        let MaxDim = 8;
        let i = 0;

        if (x = 0) {
            while (i < 8) {
                let A[i] = 0;
                let i = IntExt.Inc(i);
            }

            let Dim = 1;

            return this;
        }

        while (x > 0) {
            let A[i] = IntExt.LastNum(x);
            let x = x / 10;
            let i = IntExt.Inc(i);
        }

        let Dim = i;

        return this;
    }

    constructor BigInt FromArray(Array x, int d, int maxD) {
        let A = x;
        let Dim = d;
        let MaxDim = maxD;

        return this;
    }

    constructor BigInt Zero() {
        let A = Array.new(8);
        let A[0] = 0;
        let A[1] = 0;
        let A[2] = 0;
        let A[3] = 0;
        let A[4] = 0;
        let A[5] = 0;
        let A[6] = 0;
        let A[7] = 0;

        let Dim = 1;
        let MaxDim = 8;

        return this;
    }

    method void Print() {
        var int i;

        let i = Dim;

        while(i > 0) {
            do Output.printInt(A[i-1]);
            let i = IntExt.Dec(i);
        }

        return;
    }
    
    // +

    function BigInt Add(BigInt left, BigInt right) {
        var int maxLength, newLength, carry, i, digitL, digitR, sum, num, digit;
        var Array result;
        var BigInt bi;

        let maxLength = Math.max(left.GetDim(), right.GetDim());
        let newLength = Math.max(left.GetMaxDim(), right.GetMaxDim());

        if (maxLength = newLength) {
            let newLength = newLength*2;
        }

        let result = Array.new(newLength);

        let carry = 0;
        let i = 0;

        while (i < maxLength) {
            if (i < left.GetDim()) {
                let digitL = left.GetNum(i);
            }
            else {
                let digitL = 0;
            }

            if (i < right.GetDim()) {
                let digitR = right.GetNum(i);
            }
            else {
                let digitR = 0;
            }

            let sum = digitL + digitR + carry;

            let result[i] = IntExt.LastNum(sum);
            let carry = sum / 10;

            let i = IntExt.Inc(i);
        }


        if (~(carry = 0)) {
            let result[maxLength] = carry;
            let maxLength = IntExt.Inc(maxLength);
        }

        let i = maxLength;

        while (i < newLength) {
            let result[i] = 0;
            let i = IntExt.Inc(i);
        }

        let bi = BigInt.FromArray(result, maxLength, newLength);

        return bi;
    }

    // -

    function BigInt Subtraction(BigInt left, BigInt right) {
        var int maxLength, newLength, carry, i, digitL, digitR, sum, num, digit, length;
        var Array result;
        var BigInt bi;

        let maxLength = Math.max(left.GetDim(), right.GetDim());
        let newLength = Math.max(left.GetMaxDim(), right.GetMaxDim());

        let result = Array.new(newLength);

        let carry = 0;
        let i = 0;

        while (i < maxLength) {
            if (i < left.GetDim()) {
                let digitL = left.GetNum(i);
            }
            else {
                let digitL = 0;
            }

            if (i < right.GetDim()) {
                let digitR = right.GetNum(i);
            }
            else {
                let digitR = 0;
            }

            let digitR = digitR + carry;

            if (digitL < digitR) {
                let digitL = digitL + 10;
                let carry = 1;
            }
            else {
                let carry = 0;
            }

            let result[i] = digitL - digitR;

            let i = IntExt.Inc(i);
        }


        if (~(carry = 0)) {
            let result[maxLength] = carry;
            let maxLength = IntExt.Inc(maxLength);
        }

        let i = maxLength;

        while (i < newLength) {
            let result[i] = 0;
            let i = IntExt.Inc(i);
        }

        let length = newLength;
        let i = 0;

        while (i = 0) {
            let length = IntExt.Dec(length);
            let i = result[length-1];
        }

        let bi = BigInt.FromArray(result, length, newLength);

        return bi;
    }

    // * [AB * CD = AC*10^2m + (AC + BD)*10^m + BD]

    function BigInt Multiplication(BigInt left, BigInt right) {
        var int leftDim, rightDim, sumLength, newLength, maxLength, mult, m, m1;
        var BigInt A, B, C, D, result, mBigInt, m2BigInt, AC, BCAD, BD, newBigInt;

        let leftDim = left.GetDim();
        let rightDim = right.GetDim();
        let sumLength = leftDim + rightDim;

        if (sumLength < 5) {
            let mult = IntExt.FromBigInt(left) * IntExt.FromBigInt(right);
            return BigInt.FromInt(mult);
        }

        let maxLength = Math.max(leftDim, rightDim);

        let left = left.IncreaseTo(maxLength);
        let right = right.IncreaseTo(maxLength);

        let newLength = Math.max(left.GetMaxDim(), right.GetMaxDim());

        if (sumLength > newLength) {
            let newLength = newLength*2;
        }

        let m = maxLength/2;
        let m1 = maxLength-m;

        let A = left.Slice(m, m1);
        let B = left.Slice(0, m);
        let C = right.Slice(m, m1);
        let D = right.Slice(0, m);

        let mBigInt = BigInt.FromInt(m);
        let m2BigInt = BigInt.FromInt(m*2);

        let AC = BigInt.Multiplication(A, C);
        let AC = AC.MoveLeft(m2BigInt);

        let BCAD = BigInt.Add(BigInt.Multiplication(B, C), BigInt.Multiplication(A, D));
        let BCAD = BCAD.MoveLeft(mBigInt);

        let BD = BigInt.Multiplication(B, D);

        let result = BigInt.Add(BigInt.Add(AC, BCAD), BD);

        do A.dispose();
        do B.dispose();
        do C.dispose();
        do D.dispose();
        do mBigInt.dispose();
        do AC.dispose();
        do BCAD.dispose();
        do BD.dispose();

        let newBigInt = result.DeleteNull();
        do result.dispose();

        return newBigInt;
    }

    method BigInt DeleteNull() {
        while (A[Dim-1] = 0) {
            let Dim = IntExt.Dec(Dim);
        }

        return BigInt.FromArray(A, Dim, MaxDim);
    }

    // /
    function BigInt Divide(BigInt u, BigInt v) {
        var int n, t, length, i;
        var Array array;
        var BigInt vMove, r, tu;

        if (v.GetDim() = 0) {
            do Sys.error(-1);
        }

        let tu = u;

        let n = tu.GetDim()-1;
        let t = v.GetDim()-1;

        let length = n-t;
        let array = ArrayExt.Fill(Array.new(length+1), length+1, 0);

        let vMove = v.MoveLeft(BigInt.FromInt(length));

        while (BigInt.IsGreaterOrEqual(tu, vMove)) {
            let array[length] = IntExt.Inc(array[length]);
            let tu = BigInt.Subtraction(tu, vMove);
        }

        if (array[length] > 0) {
            let length = IntExt.Inc(length);

            if (length = 1) {
                return BigInt.FromArray(array, length, length);
            }
        }

        let i = n;

        while (i > t) {
            if (IntExt.IsGreaterOrEqual(tu.GetNum(i), v.GetNum(t))) {
                let array[i-t-1] = 9;
            }
            else {
                let array[i-t-1] = ((tu.GetNum(i)*10) + (tu.GetNum(i-1))) / v.GetNum(t);
            }

            while ((array[i-t-1] * (v.GetNum(t) * 10 + v.GetNum(t-1))) > ((tu.GetNum(i)*100) + (tu.GetNum(i-1)*10) + tu.GetNum(i-2))) {
                let array[i-t-1] = IntExt.Dec(array[i-t-1]);
            }

            let r = BigInt.FromInt(array[i-t-1] * IntExt.Pow(10, i-t-1));

            if (BigInt.IsGreater(BigInt.Multiplication(r, v), tu)) {
                while (BigInt.IsGreaterOrEqual(BigInt.Multiplication(r, v), tu)) {
                    let tu = BigInt.Add(tu, v.MoveLeft(BigInt.FromInt(i-t)));
                    let array[i-t-1] = IntExt.Dec(array[i-t]);
                }
            }
            
            let tu = BigInt.Subtraction(tu, BigInt.Multiplication(r, v));

            if (tu.GetDim() = 0) {
                return BigInt.FromArray(array, length, length);
            }

            let i = IntExt.Dec(i);
        }

        do vMove.dispose();
        do tu.dispose();
        do r.dispose();

        return BigInt.FromArray(array, length, length);
    }

    function boolean IsGreaterOrEqual(BigInt left, BigInt right) {
        var int leftDim, rightDim, i, digitL, digitR;

        let leftDim = left.GetDim();
        let rightDim = right.GetDim();

        if (leftDim < rightDim) { return false; }
        if (leftDim > rightDim) { return true; }

        let i = leftDim;

        while (i > 0) {
            let digitL = left.GetNum(i-1);
            let digitR = right.GetNum(i-1);

            if (digitL < digitR) { return false; }
            if (digitL > digitR) { return true; }

            let i = IntExt.Dec(i);
        }

        return true;
    }

    function boolean IsLessOrEqual(BigInt left, BigInt right) {
        var int leftDim, rightDim, i, digitL, digitR;

        let leftDim = left.GetDim();
        let rightDim = right.GetDim();

        if (leftDim < rightDim) { return true; }
        if (leftDim > rightDim) { return false; }

        let i = leftDim;

        while (i > 0) {
            let digitL = left.GetNum(i - 1);
            let digitR = right.GetNum(i - 1);

            if (digitL < digitR) { return true; }
            if (digitL > digitR) { return false; }

            let i = IntExt.Dec(i);
        }

        return true;
    }

    function boolean IsGreater(BigInt left, BigInt right) {
        var int leftDim, rightDim, i, digitL, digitR;

        let leftDim = left.GetDim();
        let rightDim = right.GetDim();

        if (leftDim < rightDim) { return false; }
        if (leftDim > rightDim) { return true; }

        let i = leftDim;

        while (i > 0) {
            let digitL = left.GetNum(i - 1);
            let digitR = right.GetNum(i - 1);

            if (digitL < digitR) { return false; }
            if (digitL > digitR) { return true; }

            let i = IntExt.Dec(i);
        }

        return false;
    }

    function boolean IsLess(BigInt left, BigInt right) {
        var int leftDim, rightDim, i, digitL, digitR;

        let leftDim = left.GetDim();
        let rightDim = right.GetDim();

        if (leftDim < rightDim) { return true; }
        if (leftDim > rightDim) { return false; }

        let i = leftDim;

        while (i > 0) {
            let digitL = left.GetNum(i - 1);
            let digitR = right.GetNum(i - 1);

            if (digitL < digitR) { return true; }
            if (digitL > digitR) { return false; }

            let i = IntExt.Dec(i);
        }

        return false;
    }

    method Array GetArray() {
        return A;
    }

    method int GetNum(int i) {
        if (i > Dim) {
            return 0;
        }
        else {
            return A[i];
        }
    }

    method int GetDim() {
        return Dim;
    }

    method int GetMaxDim() {
        return MaxDim;
    }

    method BigInt IncreaseTo(int x) {
        var Array arr;
        var int i;

        if (Dim = x) {
            return this;
        }

        let i = 0;

        let arr = Array.new(x);

        while (i < Dim) {
            let arr[i] = A[i];
            let i = IntExt.Inc(i);
        }

        while (i < x) {
            let arr[i] = 0;
            let i = IntExt.Inc(i);
        }

        return BigInt.FromArray(arr, x, x);
    }

    method BigInt MoveLeft(BigInt x) {
        var int newLength, extra, i;
        var Array array;

        let array = Array.new(MaxDim);
        let extra = IntExt.FromBigInt(x);
        let newLength = Dim + extra;

        if (newLength > MaxDim) {
            let array = Array.new(newLength);
        }

        let i = Dim;

        while (i > 0) {
            let array[i+extra-1] = A[i-1];
            let i = IntExt.Dec(i);
        }

        while (i < extra) {
            let array[i] = 0;
            let i = IntExt.Inc(i);
        }

        return BigInt.FromArray(array, newLength, newLength);
    }

    method BigInt Slice(int start, int dim) {
        var Array result;
        var int i;

        let result = Array.new(dim);

        let i = 0;
        while (~(i = dim)) {
            let result[i] = A[start + i];
            let i = IntExt.Inc(i);
        }

        return BigInt.FromArray(result, dim, dim);
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}